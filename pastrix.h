/* Header for module pastrix, generated by p2c */
#ifndef PASTRIX_H
#define PASTRIX_H



#ifdef PASTRIX_G
# define vextern
#else
# define vextern extern
#endif



#define tab             '\t'
#define allquant        '*'   /* *.*                           */
#define singlequant     '?'   /* *.HL?                         */
#define extsep          '.'   /* FILE.EXT                      */
#define drivesep        ':'   /* D:\...                        */
#define dirsep          '/'

#define minhandle       0   /* kleinste gÅltige Dateihandlenummer */
#define nohandle        (-1)   /* ungÅltiges Handle                 */

#define NO_OBJC         (-1)
#define FC_FILE         0x1a4   /* PARAMETER FöR FCREATE (NORMAL FILE) */




typedef long bst;


typedef long time_t_;




typedef DTA mysearchrec;
typedef Char Cstring[256];

typedef void (*dispfilelistproc)(short x, Char *s);


/* intsemtype wird bei langen Filesystemen auf WORD gesetzt, sonst auf BYTE. */
/* Dies ist wichtig, da der numerische Wert bisweilen als Extension eines    */
/* Files benutzt wird.                                                       */

typedef unsigned short intsemtype;





extern short dp_randomize(short low, short hiw);
extern long searchbyte(uchar what, uchar *start, long size);

extern long maxram(void);
extern long maxavail__(void);
extern long memavail__(void);
extern void RESETA(void);
extern void RESTART(void);
extern void WATCHDOG(short mode, short timer);
extern void VBLTIMER(short mode);
extern long GETVBLTIMER(void);
extern void NOCRITIC(boolean on);

extern Char RAM_INIT(unsigned short size);
extern void RAM_EXIT(void);

extern void klang(short nr);


/* ------------------------------------------------------------------ */


extern void Gettimestr(Char *ts);
extern void GetDatestr(Char *ds);
extern unsigned short Make_DTime(short Hour, short Min, short Sec);
extern unsigned short Make_DDate(short Day, short Mon, short Yr);
extern void Get_DDate(unsigned short ddate, short *Day, short *Mon, short *Yr);
extern void Get_DTime(unsigned short dtime, short *Hour, short *Min,
		      short *Sec);
extern long statclock(void);
extern void mtpause(void);

extern short drv2num(Char c);
extern boolean exist(Char *name);
/* if exist(Filename) then ... */
extern long sfsize(Char *name);
extern short sfrename(Char *oldname, Char *newname);
extern short sfcreate(Char *name, short mode);
extern short sfopen(Char *name, short mode);
extern void sfclose(short *handle);
extern void sfclosedel(short *handle);
extern void sfdelfile(Char *name);

extern void sfdispfilelist(short x, dispfilelistproc outproc);
extern void chkopenfiles(long maxopen, Char *fn);
/* maxopen in sekunden */

extern short sffirst(Char *pfad, short attr, DTA *dirr);
extern short sfnext(DTA *dirr);

extern void sfgetdir(short d, Char *p);
/* Get Directory     */
extern void sfchdir(Char *p);
/* Change Directory  */
extern void sfmakedir(Char *name);
/* create directory  */

extern void del_leadblanks(Char *s);
/* Lîscht fÅhrende Leerzeichen in "s" */
extern void del_lastblanks(Char *s);
/* Lîscht letzte Leerzeichen */
extern void spacing(short i, Char *s);
extern void lspacing(Char *txt, short l);
extern void rspacing(Char *txt, short l);

extern void cut(Char *s, short newlength);
extern Char upcase_(Char ch);
extern Char lowcase(Char ch);
extern void upper(Char *s);
extern void lower(Char *s);

extern boolean zahl(Char *s);
/* nur dez               */
extern boolean azahl(Char *s);
/* auch bin und hex      */
extern boolean rzahl(Char *s);
/* nur dez/real          */
extern double str2real(Char *s);
extern long str2lint(Char *s);
extern long Str2int(Char *s);
/* "String to Integer", beginnt der String mit "$", -> Hex-Zahl, "%", -> Bin-Zahl */
extern long hstr2int(Char *s);
/* "Hex-String to Integer", String wird unbedingt als Hex-Zahl interpretiert */
extern long bstr2int(Char *s);
/* "Bin-String to Integer", String wird unbedingt als Bin-Zahl interpretiert */
extern void int2str(long i, Char *s);
/* "Integer to String"   */
extern void lint2str(long i, Char *s);
/* "Long Integer to String"  */
extern void int2hstr(long i, Char *s);
/* "Integer to Hex-String", Zahl als Hex-Zahl dargestellt, mit "$" am Anfang */
extern void int2hchar(short i, Char *c1, Char *c2);
/* Bereich von 0..255    */
extern void hstr2str(Char *h, Char *s);
extern void str2hstr(Char *s, Char *h);

extern void str2mem(Char *s1, uchar *at, boolean lbyte);
extern void mem2str(uchar *at, Char *s1);
extern void mem2str2(Char *s1, uchar *at, short size);
extern void del_mulblanks(Char *s);
/*LÑsst in einer Folge von Leerzeichen nur je eines stehen*/
extern short count_words(Char *s);
extern void get_word(Char *inp, Char *outp);
/*Holt nÑchstes Wort aus "inp" und lîscht dieses dort, Leerzeichen werden Åberlesen*/
extern void del_comment(Char *z, Char c);
/*Lîscht String nach erstem Auftreten von "C"*/

/* get_line und put_line operieren in einem Pufferspeicher, die Zeilen sollten zum Lesen mit CR+LF abgeschlossen sein */
extern void get_line(uchar *buf, long *posi, long ende, Char *zeile);
extern void next_line(uchar *buf, long *posi, long ende);
extern void prev_line(uchar *buf, long *posi);
extern void put_line(uchar *buf, long *posi, Char *zeile);


extern void umlaut1(Char *txt);
extern void umlaut2(Char *txt);
extern void ersetze(Char *oldstr, Char *newstr, Char *txt);
extern void validate(Char *name);
extern void app_file(Char *filea, short k2, boolean del_source);
extern void gkdeutsch(Char *name);
extern void sfbread(boolean aslongaspossible, Char *name, uchar **puffer,
		    long *size);
extern void filemove(Char *filea, Char *fileb);
extern void filecopy(Char *filea, Char *fileb);
extern void filecut(Char *filea, Char *fileb, long start, long size);
extern void del_ext(Char *s);
extern void get_ext(Char *s, Char *sext);
extern void new_ext(Char *s, Char *ext);
extern void get_path(Char *s);
extern void del_path(Char *s);
extern void del_blanks(Char *s);
extern void string_to_file(short *handle, Char *line, boolean crlf);
extern boolean file_to_string(short handle, Char *line);
extern boolean myeof(short handle);
extern long append(Char *name, Char *zeile, boolean crlf);
extern short week_day(short d, short m, short y);
/* Wochentags-Berechnung (1583-4139) hi */
extern void del_dir(Char *name);


extern void dpgetmem(uchar **p, long size);
extern void dpfreemem(uchar **p, long size);

/* ************************************************** */



#undef vextern

#endif /*PASTRIX_H*/

/* End. */
